//
// Copyright 2016 Michael Ahn m3ahn@edu.uwaterloo.ca
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import { Actor } from "./actor";
import { RenderStyle } from "../render/renderer";
import { mat4, vec3, quat } from "../lib/gl-matrix";
import { Program } from "../render/shader_programs/program";

export class MissileActor extends Actor {

    //--------------------------------------------------------------------------
    // Public members
    //--------------------------------------------------------------------------

    public readonly renderStyle = RenderStyle.Basic;

    public isVisible: boolean;

    public constructor(gl: WebGLRenderingContext) {
        super(gl, MissileActor.vertexData, MissileActor.elementData);
        this.edgeFactor = 5.0;
        vec3.set(this.baseOrientation, 0, 0, 1);
    }

    public setFacing(direction: vec3) {
        quat.rotationTo(this.rotationQuat, this.baseOrientation, direction);
        mat4.fromQuat(this.rotationMatrix, this.rotationQuat);
    }

    public tick(time: number, position: vec3) {
        mat4.fromTranslation(this.dynamicTransform, position);
        mat4.rotateZ(this.staticTransform, this.rotationMatrix, time * 6.28);
        mat4.multiply(this.modelTransform, this.dynamicTransform, this.staticTransform);
    }

    public draw(gl: WebGLRenderingContext, program: Program) {
        if (this.isVisible) {
            super.draw(gl, program);
        }
    }

    //--------------------------------------------------------------------------
    // Private members
    //--------------------------------------------------------------------------

    private readonly rotationQuat = quat.create();
    private readonly baseOrientation = vec3.create();
    private readonly rotationMatrix = mat4.create();

    private static vertexData = new Float32Array([
        -0.64793, -0.64793, 0, 0.28847, -0.95749, -0, 0.375, 0.125,
        -0.1899, -0.3798, -0.3798, -0.24663, -0.65149, -0.71745, 0.4375, 0,
        -0.25, -0.5, -0.25, -0.30628, -0.8193, -0.4847, 0.4375, 0.0625,
        0, -0.8867, 0, -0.78536, -0.61904, -0, 0.5, 0.125,
        0, -0.8867, 0, 0.78536, -0.61904, -0, 0.5, 0.125,
        0.1899, -0.3798, -0.3798, 0.24663, -0.65149, -0.71745, 0.5625, 0,
        0.25, -0.5, -0.25, 0.30628, -0.8193, -0.4847, 0.5625, 0.0625,
        0.64793, -0.64793, 0, -0.28847, -0.95749, -0, 0.625, 0.125,
        -0.25, -0.5, 0, -0.34579, -0.93831, 0, 0.4375, 0.125,
        0.25, -0.5, 0, 0.34579, -0.93831, 0, 0.5625, 0.125,
        -0.25, -0.5, 0.25, -0.30628, -0.8193, 0.4847, 0.4375, 0.1875,
        0.25, -0.5, 0.25, 0.30628, -0.8193, 0.4847, 0.5625, 0.1875,
        -0.1899, -0.3798, 0.3798, -0.24663, -0.65149, 0.71745, 0.4375, 0.25,
        0.1899, -0.3798, 0.3798, 0.24663, -0.65149, 0.71745, 0.5625, 0.25,
        -0.64793, -0.64793, 0, -0.46966, -0.46966, 0.74756, 0.375, 0.125,
        -0.1899, -0.3798, 0.3798, -0.51201, -0.56668, 0.64554, 0.4375, 0.25,
        -0.25, -0.25, 0.5, -0.52475, -0.52475, 0.67028, 0.4375, 0.3125,
        -0.3798, -0.1899, 0.3798, -0.56668, -0.51201, 0.64554, 0.375, 0.3125,
        0, -0.25, 0.71023, -0, -0.7662, 0.64261, 0.5, 0.3125,
        0.1899, -0.3798, 0.3798, 0.51201, -0.56668, 0.64554, 0.5625, 0.25,
        0.25, -0.25, 0.5, 0.52475, -0.52475, 0.67028, 0.5625, 0.3125,
        0.64793, -0.64793, 0, 0.46966, -0.46966, 0.74756, 0.625, 0.125,
        0.3798, -0.1899, 0.3798, 0.56668, -0.51201, 0.64554, 0.625, 0.3125,
        -0.25, 0, 0.71023, -0.7662, 0, 0.64261, 0.4375, 0.375,
        0, 0, 1.0954, 0, 0, 1, 0.5, 0.375,
        0.25, 0, 0.71023, 0.7662, 0, 0.64261, 0.5625, 0.375,
        -0.3798, 0.1899, 0.3798, -0.56668, 0.51201, 0.64554, 0.375, 0.4375,
        -0.25, 0.25, 0.5, -0.52475, 0.52475, 0.67028, 0.4375, 0.4375,
        0, 0.25, 0.71023, -0, 0.7662, 0.64261, 0.5, 0.4375,
        0.3798, 0.1899, 0.3798, 0.56668, 0.51201, 0.64554, 0.625, 0.4375,
        0.25, 0.25, 0.5, 0.52475, 0.52475, 0.67028, 0.5625, 0.4375,
        -0.1899, 0.3798, 0.3798, -0.51201, 0.56668, 0.64554, 0.4375, 0.5,
        -0.64793, 0.64793, -0, -0.46966, 0.46966, 0.74756, 0.375, 0.625,
        0.1899, 0.3798, 0.3798, 0.51201, 0.56668, 0.64554, 0.5625, 0.5,
        0.64793, 0.64793, -0, 0.46966, 0.46966, 0.74756, 0.625, 0.625,
        -0.64793, 0.64793, -0, 0.28847, 0.95749, -0, 0.375, 0.625,
        -0.1899, 0.3798, 0.3798, -0.24663, 0.65149, 0.71745, 0.4375, 0.5,
        -0.25, 0.5, 0.25, -0.30628, 0.8193, 0.4847, 0.4375, 0.5625,
        0, 0.8867, -0, -0.78536, 0.61904, -0, 0.5, 0.625,
        0, 0.8867, -0, 0.78536, 0.61904, -0, 0.5, 0.625,
        0.1899, 0.3798, 0.3798, 0.24663, 0.65149, 0.71745, 0.5625, 0.5,
        0.25, 0.5, 0.25, 0.30628, 0.8193, 0.4847, 0.5625, 0.5625,
        0.64793, 0.64793, -0, -0.28847, 0.95749, -0, 0.625, 0.625,
        -0.25, 0.5, -0, -0.34579, 0.93831, -0, 0.4375, 0.625,
        0.25, 0.5, -0, 0.34579, 0.93831, -0, 0.5625, 0.625,
        -0.25, 0.5, -0.25, -0.30628, 0.8193, -0.4847, 0.4375, 0.6875,
        0.25, 0.5, -0.25, 0.30628, 0.8193, -0.4847, 0.5625, 0.6875,
        -0.1899, 0.3798, -0.3798, -0.24663, 0.65149, -0.71745, 0.4375, 0.75,
        0.1899, 0.3798, -0.3798, 0.24663, 0.65149, -0.71745, 0.5625, 0.75,
        -0.64793, 0.64793, -0, -0.46966, 0.46966, -0.74756, 0.375, 0.625,
        -0.1899, 0.3798, -0.3798, -0.51201, 0.56668, -0.64554, 0.4375, 0.75,
        -0.25, 0.25, -0.5, -0.52475, 0.52475, -0.67028, 0.4375, 0.8125,
        -0.3798, 0.1899, -0.3798, -0.56668, 0.51201, -0.64554, 0.375, 0.8125,
        0, 0.25, -0.71023, 0, 0.7662, -0.64261, 0.5, 0.8125,
        0.1899, 0.3798, -0.3798, 0.51201, 0.56668, -0.64554, 0.5625, 0.75,
        0.25, 0.25, -0.5, 0.52475, 0.52475, -0.67028, 0.5625, 0.8125,
        0.64793, 0.64793, -0, 0.46966, 0.46966, -0.74756, 0.625, 0.625,
        0.3798, 0.1899, -0.3798, 0.56668, 0.51201, -0.64554, 0.625, 0.8125,
        -0.25, -0, -0.71023, -0.7662, -0, -0.64261, 0.4375, 0.875,
        0, -0, -1.0954, 0, -0, -1, 0.5, 0.875,
        0.25, -0, -0.71023, 0.7662, -0, -0.64261, 0.5625, 0.875,
        -0.3798, -0.1899, -0.3798, -0.56668, -0.51201, -0.64554, 0.375, 0.9375,
        -0.25, -0.25, -0.5, -0.52475, -0.52475, -0.67028, 0.4375, 0.9375,
        0, -0.25, -0.71023, 0, -0.7662, -0.64261, 0.5, 0.9375,
        0.3798, -0.1899, -0.3798, 0.56668, -0.51201, -0.64554, 0.625, 0.9375,
        0.25, -0.25, -0.5, 0.52475, -0.52475, -0.67028, 0.5625, 0.9375,
        -0.1899, -0.3798, -0.3798, -0.51201, -0.56668, -0.64554, 0.4375, 1,
        -0.64793, -0.64793, 0, -0.46966, -0.46966, -0.74756, 0.375, 1,
        0.1899, -0.3798, -0.3798, 0.51201, -0.56668, -0.64554, 0.5625, 1,
        0.64793, -0.64793, 0, 0.46966, -0.46966, -0.74756, 0.625, 1,
        0.3798, 0.1899, -0.3798, 0.65149, 0.24663, -0.71745, 0.8125, 0,
        0.64793, 0.64793, -0, 0.95749, -0.28847, -0, 0.875, 0.125,
        0.5, 0.25, -0.25, 0.8193, 0.30628, -0.4847, 0.8125, 0.0625,
        0.8867, 0, 0, 0.61904, 0.78536, -0, 0.75, 0.125,
        0.3798, -0.1899, -0.3798, 0.65149, -0.24663, -0.71745, 0.6875, 0,
        0.8867, 0, 0, 0.61904, -0.78536, -0, 0.75, 0.125,
        0.5, -0.25, -0.25, 0.8193, -0.30628, -0.4847, 0.6875, 0.0625,
        0.64793, -0.64793, 0, 0.95749, 0.28847, -0, 0.625, 0.125,
        0.5, 0.25, -0, 0.93831, 0.34579, -0, 0.8125, 0.125,
        0.5, -0.25, 0, 0.93831, -0.34579, 0, 0.6875, 0.125,
        0.5, 0.25, 0.25, 0.8193, 0.30628, 0.4847, 0.8125, 0.1875,
        0.5, -0.25, 0.25, 0.8193, -0.30628, 0.4847, 0.6875, 0.1875,
        0.3798, 0.1899, 0.3798, 0.65149, 0.24663, 0.71745, 0.8125, 0.25,
        0.3798, -0.1899, 0.3798, 0.65149, -0.24663, 0.71745, 0.6875, 0.25,
        -0.64793, 0.64793, -0, -0.95749, -0.28847, 0, 0.125, 0.125,
        -0.3798, 0.1899, -0.3798, -0.65149, 0.24663, -0.71745, 0.1875, 0,
        -0.5, 0.25, -0.25, -0.8193, 0.30628, -0.4847, 0.1875, 0.0625,
        -0.8867, 0, 0, -0.61904, 0.78536, -0, 0.25, 0.125,
        -0.8867, 0, 0, -0.61904, -0.78536, -0, 0.25, 0.125,
        -0.3798, -0.1899, -0.3798, -0.65149, -0.24663, -0.71745, 0.3125, 0,
        -0.5, -0.25, -0.25, -0.8193, -0.30628, -0.4847, 0.3125, 0.0625,
        -0.64793, -0.64793, 0, -0.95749, 0.28847, 0, 0.375, 0.125,
        -0.5, 0.25, -0, -0.93831, 0.34579, -0, 0.1875, 0.125,
        -0.5, -0.25, 0, -0.93831, -0.34579, 0, 0.3125, 0.125,
        -0.5, 0.25, 0.25, -0.8193, 0.30628, 0.4847, 0.1875, 0.1875,
        -0.5, -0.25, 0.25, -0.8193, -0.30628, 0.4847, 0.3125, 0.1875,
        -0.3798, 0.1899, 0.3798, -0.65149, 0.24663, 0.71745, 0.1875, 0.25,
        -0.3798, -0.1899, 0.3798, -0.65149, -0.24663, 0.71745, 0.3125, 0.25,
        0.8867, 0, 0, 0.7446, 0, 0.66751, 0.625, 0.375,
        0, 0.8867, -0, 0, 0.7446, 0.66751, 0.5, 0.625,
        -0.8867, 0, 0, -0.7446, 0, 0.66751, 0.375, 0.375,
        0, -0.8867, 0, 0, -0.7446, 0.66751, 0.5, 0.125,
        0, -0.8867, 0, 0, -0.7446, -0.66751, 0.5, 1,
        -0.8867, 0, 0, -0.7446, -0, -0.66751, 0.375, 0.875,
        0, 0.8867, -0, 0, 0.7446, -0.66751, 0.5, 0.625,
        0.8867, 0, 0, 0.7446, -0, -0.66751, 0.625, 0.875,
    ]);

    private static elementData = new Uint16Array([
        0, 1, 2,
        1, 3, 2,
        4, 5, 6,
        5, 7, 6,
        0, 2, 8,
        2, 3, 8,
        4, 6, 9,
        6, 7, 9,
        0, 8, 10,
        8, 3, 10,
        4, 9, 11,
        9, 7, 11,
        0, 10, 12,
        10, 3, 12,
        4, 11, 13,
        11, 7, 13,
        14, 15, 16,
        14, 16, 17,
        15, 18, 16,
        18, 19, 20,
        19, 21, 22,
        19, 22, 20,
        17, 16, 23,
        23, 18, 24,
        18, 25, 24,
        20, 22, 25,
        26, 23, 27,
        23, 24, 28,
        24, 25, 28,
        25, 29, 30,
        26, 27, 31,
        26, 31, 32,
        27, 28, 31,
        28, 30, 33,
        30, 29, 34,
        30, 34, 33,
        35, 36, 37,
        36, 38, 37,
        39, 40, 41,
        40, 42, 41,
        35, 37, 43,
        37, 38, 43,
        39, 41, 44,
        41, 42, 44,
        35, 43, 45,
        43, 38, 45,
        39, 44, 46,
        44, 42, 46,
        35, 45, 47,
        45, 38, 47,
        39, 46, 48,
        46, 42, 48,
        49, 50, 51,
        49, 51, 52,
        50, 53, 51,
        53, 54, 55,
        54, 56, 57,
        54, 57, 55,
        52, 51, 58,
        58, 53, 59,
        53, 60, 59,
        55, 57, 60,
        61, 58, 62,
        58, 59, 63,
        59, 60, 63,
        60, 64, 65,
        61, 62, 66,
        61, 66, 67,
        62, 63, 66,
        63, 65, 68,
        65, 64, 69,
        65, 69, 68,
        70, 71, 72,
        73, 70, 72,
        74, 75, 76,
        77, 74, 76,
        72, 71, 78,
        73, 72, 78,
        76, 75, 79,
        77, 76, 79,
        78, 71, 80,
        73, 78, 80,
        79, 75, 81,
        77, 79, 81,
        80, 71, 82,
        73, 80, 82,
        81, 75, 83,
        77, 81, 83,
        84, 85, 86,
        85, 87, 86,
        88, 89, 90,
        89, 91, 90,
        84, 86, 92,
        86, 87, 92,
        88, 90, 93,
        90, 91, 93,
        84, 92, 94,
        92, 87, 94,
        88, 93, 95,
        93, 91, 95,
        84, 94, 96,
        94, 87, 96,
        88, 95, 97,
        95, 91, 97,
        23, 28, 27,
        16, 18, 23,
        18, 20, 25,
        28, 25, 30,
        25, 22, 98,
        25, 98, 29,
        28, 33, 99,
        31, 28, 99,
        100, 23, 26,
        17, 23, 100,
        15, 101, 18,
        101, 19, 18,
        51, 53, 58,
        53, 55, 60,
        63, 60, 65,
        58, 63, 62,
        63, 68, 102,
        66, 63, 102,
        103, 58, 61,
        52, 58, 103,
        50, 104, 53,
        104, 54, 53,
        60, 57, 105,
        60, 105, 64,
    ]);

}
